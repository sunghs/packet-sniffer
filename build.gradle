import java.nio.charset.StandardCharsets

buildscript {
    ext {
        name = "packet-sniffer"
        group = "sunghs.packet.sniff"
        version = "1.0.0-RELEASE"
        springBootVersion = "2.6.0"
        springDependencyManagementVersion = "1.0.11.RELEASE"
        queryDslPluginVersion = "1.0.10"
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'com.ewerk.gradle.plugins.querydsl' version "${queryDslPluginVersion}"
    id 'java'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

wrapper {
    // 2021. 11. 30
    gradleVersion = "7.3"
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-bin.zip"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = StandardCharsets.UTF_8.name()
}

dependencies {
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    implementation("org.projectlombok:lombok")

    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.kafka:spring-kafka")
    implementation("org.apache.kafka:kafka-streams")
    implementation("mysql:mysql-connector-java")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.0.1")


    implementation("commons-codec:commons-codec:1.9")
    implementation("com.google.code.gson:gson:2.8.6") {
        changing = true
    }

    implementation("org.pcap4j:pcap4j-core:1.8.2")
    implementation("org.pcap4j:pcap4j-packetfactory-static:1.8.2")

    implementation("com.querydsl:querydsl-jpa:${queryDslVersion}")
    implementation("com.querydsl:querydsl-apt:${queryDslVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

def queryDslEnv = "$buildDir/generated/querydsl" as Object

querydsl {
    jpa = true
    querydslSourcesDir = queryDslEnv
}

sourceSets {
    main.java.srcDir queryDslEnv
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

test {
    useJUnitPlatform()
}
